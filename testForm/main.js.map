{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/form/form.component.html","webpack:///./src/app/form/form.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,6jBAA6jB,cAAc,qDAAqD,cAAc,8B;;;;;;;;;;;;;;;;;;;;;ACA5lB;AAOlD;IAAA;IAsBA,CAAC;IAhBC,+BAAQ,GAAR;QACE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC3B,CAAC;IAED,+BAAQ,GAAR;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,EAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAChD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC3B,CAAC;IAED,gCAAS,GAAT,UAAU,OAAkC;QAC1C,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IArBU,YAAY;QAJxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;SAErB,CAAC;OACW,YAAY,CAsBxB;IAAD,mBAAC;CAAA;AAtBwB;;;;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AAEM;AACO;AACD;AAcrD;IAAA;IAAyB,CAAC;IAAb,SAAS;QAZrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,kEAAa;aACd;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,kEAAmB;aACpB;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;ACnBtB,8UAA8U,qEAAqE,kXAAkX,uEAAuE,gpCAAgpC,6EAA6E,8qBAA8qB,2FAA2F,wrB;;;;;;;;;;;;;;;;;;;;;;;;;ACA3uF;AACH;AAOpE;IAWE,uBAAoB,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;QARnC,YAAO,GAAG;YACR,IAAI,EAAC,EAAE;YACP,IAAI,EAAC,EAAE;SACR;QAGkB,mBAAc,GAA6C,IAAI,0DAAY,EAAE,CAAC;IAE1D,CAAC;IAExC,gCAAQ,GAAR;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACxB,IAAI,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC/B,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAC,yDAAU,CAAC,KAAK,CAAC,CAAC;YACnD,UAAU,EAAE,CAAC,EAAE,CAAC;YAChB,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAC3C,EAAE,EAAC,SAAS,EAAE,IAAI,CAAC,kBAAkB,EAAC,CAAC;IAC1C,CAAC;IAED,0CAAkB,GAAlB,UAAmB,CAAY;QAC7B,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,KAAK,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;YACjE,MAAM,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,gCAAQ,GAAR,UAAS,IAAI;QACX,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QAChD,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC;QACtD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAxBkB;QAAlB,4DAAM,CAAC,SAAS,CAAC;kCAAiB,0DAAY;yDAAkD;IATtF,aAAa;QAJzB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;SAErB,CAAC;yCAYwB,0DAAW;OAXxB,aAAa,CAkCzB;IAAD,oBAAC;CAAA;AAlCyB;;;;;;;;;;;;;;ACR1B;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<nav class=\\\"nav\\\">\\r\\n  <ul class=\\\"nav-list\\\">\\r\\n    <li class=\\\"nav-list__item\\\">\\r\\n      <a href=\\\"#\\\" class=\\\"logo\\\">\\r\\n        <img class=\\\"logo__img\\\" src=\\\"/assets/logo.png\\\" alt=\\\"logo\\\">\\r\\n      </a>\\r\\n    </li>\\r\\n    <li class=\\\"nav-list__item\\\">\\r\\n      <a (click)=\\\"openForm()\\\" class=\\\"nav-list__link\\\">Registration Form</a>\\r\\n    </li>\\r\\n  </ul>\\r\\n</nav>\\r\\n<app-form *ngIf=\\\"isOpenForm\\\" (message)=\\\"onChanged($event)\\\"></app-form>\\r\\n<div *ngIf=\\\"isOpenPopup\\\"class=\\\"pop-up\\\">\\r\\n  <h2>\\r\\n    Thanks you for registering the {{message.name}}\\r\\n    <span *ngIf=\\\"message.city\\\">from the city {{message.city}}</span>.\\r\\n  </h2>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  isOpenForm: boolean;\r\n  isOpenPopup:boolean;\r\n  message;\r\n\r\n  ngOnInit() {\r\n    this.isOpenForm = false;\r\n    this.isOpenPopup = false;\r\n  }\r\n\r\n  openForm(){\r\n    this.isOpenForm = this.isOpenForm? false : true;\r\n    this.isOpenPopup = false;\r\n  }\r\n\r\n  onChanged(message:{name:string, city:string}) {\r\n    console.log(message);\r\n    this.message = message;\r\n    this.isOpenForm = false;\r\n    this.isOpenPopup = true;\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { FormComponent } from './form/form.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    FormComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"<div class=\\\"wrapper\\\">\\r\\n    <h1>Registration Form</h1>\\r\\n    <form class=\\\"form\\\" [formGroup] = \\\"form\\\" (ngSubmit)=\\\"onSubmit(form)\\\">\\r\\n\\r\\n      <div class=\\\"form__group\\\">\\r\\n        <label class=\\\"form__label\\\" for=\\\"name\\\">Name</label>\\r\\n        <input type=\\\"text\\\" class=\\\"form__control\\\" [ngClass]=\\\"{'form__has-error':form.get('name').invalid&&form.get('name').touched}\\\" id=\\\"name\\\" formControlName=\\\"name\\\">\\r\\n        <small *ngIf=\\\"form.get('name').invalid&&form.get('name').touched\\\" class=\\\"form__error\\\">This is a required field</small>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form__group\\\">\\r\\n        <label class=\\\"form__label\\\" for=\\\"email\\\">Email</label>\\r\\n        <input type=\\\"email\\\" class=\\\"form__control\\\" [ngClass]=\\\"{'form__has-error':form.get('email').invalid&&form.get('email').touched}\\\" id=\\\"email\\\" formControlName=\\\"email\\\" >\\r\\n        <small *ngIf=\\\"form.get('email').invalid&&form.get('email').touched\\\" class=\\\"form__error\\\">\\r\\n          <span *ngIf=\\\"form.get('email').errors['required']&&form.get('email').touched\\\" >This is a required field</span>\\r\\n          <span *ngIf=\\\"form.get('email').errors['email']&&form.get('email').touched\\\" class=\\\"form__error\\\">It shoud be an email</span>\\r\\n        </small>\\r\\n        \\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form__group\\\">\\r\\n        <label class=\\\"form__label\\\" for=\\\"selectCity\\\">Select City</label>\\r\\n        <select id=\\\"selectCity\\\" class=\\\"form__control\\\" formControlName=\\\"selectCity\\\">\\r\\n          <option value=\\\"Kyiv\\\">Kyiv</option>\\r\\n          <option value=\\\"Kharkiv\\\">Kharkiv</option>\\r\\n          <option value=\\\"Lviv\\\">Lviv</option>\\r\\n          <option value=\\\"Dnipro\\\">Dnipro</option>\\r\\n          <option value=\\\"Ternopil\\\">Ternopil</option>\\r\\n        </select>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form__group\\\">\\r\\n        <label class=\\\"form__label\\\" for=\\\"password\\\">Password</label>\\r\\n        <input type=\\\"password\\\" class=\\\"form__control\\\" [ngClass]=\\\"{'form__has-error':form.get('password').invalid&&form.get('password').touched}\\\" id=\\\"password\\\" formControlName=\\\"password\\\">\\r\\n        <small *ngIf=\\\"form.get('password').invalid&&form.get('password').touched\\\" class=\\\"form__error\\\">\\r\\n            <span *ngIf=\\\"form.get('password').errors['required']&&form.get('password').touched\\\" >This is a required field.</span>\\r\\n            <span *ngIf=\\\"form.get('password').errors['minlength']&&form.get('password').touched\\\">Password should contain 6 characters.</span>\\r\\n        </small>\\r\\n      </div>\\r\\n      \\r\\n      <div class=\\\"form__group\\\">\\r\\n        <label class=\\\"form__label\\\" for=\\\"confirmPassword\\\">Confirm Password</label>\\r\\n        <input type=\\\"password\\\" class=\\\"form__control\\\" [ngClass]=\\\"{'form__has-error':form.get('confirmPassword').invalid&&form.get('confirmPassword').touched}\\\" id=\\\"confirmPassword\\\" formControlName=\\\"confirmPassword\\\">\\r\\n        <small *ngIf=\\\"form.get('confirmPassword').invalid&&form.get('confirmPassword').errors['required']&&form.get('confirmPassword').touched\\\" class=\\\"form__error\\\" >This is a required field. </small>\\r\\n        <small *ngIf=\\\"form.get('confirmPassword').touched&&form.get('password').touched&&form.errors&&form.errors['confirm']\\\" class=\\\"form__error\\\">Password does not match.</small>\\r\\n  \\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form__group\\\">\\r\\n        <button type=\\\"submit\\\" class=\\\"form__submit\\\" [disabled]=\\\"form.invalid\\\">\\r\\n          Submit\\r\\n        </button>\\r\\n      </div>\\r\\n    </form>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit, Output,EventEmitter } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-form',\r\n  templateUrl: './form.component.html'\r\n})\r\nexport class FormComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  message = {\r\n    name:'',\r\n    city:''\r\n  }\r\n\r\n\r\n  @Output('message') messageEmmiter: EventEmitter<{name:string, city:string}> = new EventEmitter();\r\n\r\n  constructor(private fb: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      name: ['', Validators.required],\r\n      email: ['', [Validators.required,Validators.email]],\r\n      selectCity: [''],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      confirmPassword: ['', Validators.required],  \r\n    }, {validator: this.passwordConfirming})\r\n  }\r\n\r\n  passwordConfirming(c: FormGroup) {\r\n    if (c.controls.password.value !== c.controls.confirmPassword.value) {\r\n        return {confirm: true};\r\n    }\r\n  }\r\n  \r\n  onSubmit(form) {\r\n    this.message.name = this.form.get('name').value;\r\n    this.message.city = this.form.get('selectCity').value;\r\n    this.messageEmmiter.emit(this.message); \r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}